service: hr-services-internal

provider:
  stage: ${file(${opt:variables}):stage}
  name: aws
  runtime: nodejs8.10
  timeout: 30  # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 128
  environment:  #environment variables
    awsRegion: ${file(${opt:variables}):awsRegion}
    secretsAwsEndPoint: ${file(${opt:variables}):secretsAwsEndPoint}
    apiSecretId: ${file(${opt:variables}):apiSecretId}
    rdsCredentialsId: ${file(${opt:variables}):rdsCredentialsId}
    sesSmtpCredentialsId: ${file(${opt:variables}):sesSmtpCredentialsId}
    sesSmtpServerHost: ${file(${opt:variables}):sesSmtpServerHost}
    sesSmtpServerPort: ${file(${opt:variables}):sesSmtpServerPort}
    payrollApiCredentialsId: ${file(${opt:variables}):payrollApiCredentialsId}
    ssoCredentialsId: ${file(${opt:variables}):ssoCredentialsId}
    asureAdminRoleId: ${file(${opt:variables}):asureAdminRoleId}
    evoHrGlobalAdmin: ${file(${opt:variables}):evoHrGlobalAdmin}
    stage: ${file(${opt:variables}):stage}
    apiDomain: ${file(${opt:variables}):apiDomain}
    fromEmail: ${file(${opt:variables}):fromEmail}
    hrCredentialsId: ${file(${opt:variables}):hrCredentialsId}

  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"
    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"
    - Effect: Allow
      Action:
        - acm:ListCertificates
        - apigateway:GET
        - apigateway:DELETE
        - apigateway:POST
        - apigateway:PATCH
        - apigateway:PUT
        - cloudfront:UpdateDistribution
        - route53:ListHostedZones
        - route53:GetHostedZone
        - route53:ListResourceRecordSets
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
      Resource: "*"
    - Effect: Allow
      Action: # Gives permission to SES in a specific region
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-east-1:*:*"

functions:
  tokenVerifier:
    handler: authentication/handler.tokenVerifier
  
  ssoTokenVerifier:
    handler: authentication/handler.ssoTokenVerifier

  hrTokenVerifier:
    handler: authentication/handler.hrTokenVerifier

  eventNotifier:
    handler: notification/handler.send

  auditLogger:
    handler: audit/handler.log

  queryExecutor:
    handler: database/handler.execute
    memorySize: 1024
    vpc:
      securityGroupIds:
        - ${file(${opt:variables}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${opt:variables}):privateSubnetId1}
        - ${file(${opt:variables}):privateSubnetId2}

resources:
  Outputs:
    TokenVerifierArn:
      Value: { "Fn::GetAtt": ["TokenVerifierLambdaFunction", "Arn" ] }
    EventNotifierArn:
      Value: { "Fn::GetAtt": ["EventNotifierLambdaFunction", "Arn" ] }
    AuditLoggerArn:
      Value: { "Fn::GetAtt": ["AuditLoggerLambdaFunction", "Arn" ] }
    SsoTokenVerifierArn:
      Value: { "Fn::GetAtt": ["SsoTokenVerifierLambdaFunction", "Arn" ] }
    HrTokenVerifierArn:
      Value: { "Fn::GetAtt": ["HrTokenVerifierLambdaFunction", "Arn" ] }

plugins:
  - serverless-stack-output
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter


package:
  individually: false
  excludeDevDependencies: true

custom:
  output:
    handler: output.handler
    file: serverless-output.json
  webpack:
    webpackConfig: ./webpack/${file(${opt:variables}):webpackConfigurationFile}
    includeModules: true
    packager: 'npm'
