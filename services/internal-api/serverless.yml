service: hr-services-internal${opt:branchName, ''}

provider:
  stage: ${file(${self:custom.configFile}):stage}
  name: aws
  runtime: nodejs12.x
  timeout: 30  # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 128
  logRetentionInDays: ${file(${self:custom.configFile}):logRetentionInDays}
  environment:  #environment variables
    awsRegion: ${file(${self:custom.configFile}):awsRegion}
    secretsAwsEndPoint: ${file(${self:custom.configFile}):secretsAwsEndPoint}
    apiSecretId: ${file(${self:custom.configFile}):apiSecretId}
    rdsCredentialsId: ${file(${self:custom.configFile}):rdsCredentialsId}
    sesSmtpCredentialsId: ${file(${self:custom.configFile}):sesSmtpCredentialsId}
    sesSmtpServerHost: ${file(${self:custom.configFile}):sesSmtpServerHost}
    sesSmtpServerPort: ${file(${self:custom.configFile}):sesSmtpServerPort}
    postmarkSmtpCredentialsId: ${file(${self:custom.configFile}):postmarkSmtpCredentialsId}
    postmarkSmtpServerHost: ${file(${self:custom.configFile}):postmarkSmtpServerHost}
    postmarkSmtpServerPort: ${file(${self:custom.configFile}):postmarkSmtpServerPort}
    payrollApiCredentialsId: ${file(${self:custom.configFile}):payrollApiCredentialsId}
    ssoCredentialsId: ${file(${self:custom.configFile}):ssoCredentialsId}
    asureAdminRoleId: ${file(${self:custom.configFile}):asureAdminRoleId}
    evoHrGlobalAdmin: ${file(${self:custom.configFile}):evoHrGlobalAdmin}
    stage: ${file(${self:custom.configFile}):stage}
    apiDomain: ${file(${self:custom.configFile}):apiDomain}
    fromEmail: ${file(${self:custom.configFile}):fromEmail}
    hrCredentialsId: ${file(${self:custom.configFile}):hrCredentialsId}
    goldilocksApplicationId: ${file(${self:custom.configFile}):goldilocksApplicationId}
    ssoPublicKey1: ${file(${self:custom.configFile}):ssoPublicKey1}
    ssoPublicKey2: ${file(${self:custom.configFile}):ssoPublicKey2}
    hrServicesDomain: ${file(${self:custom.configFile}):hrServicesDomain}
    goldilocksTenantId: ${file(${self:custom.configFile}):goldilocksTenantId}
    fileBucketName: ${file(${self:custom.configFile}):fileBucketName}
    eSignatureApiCredentialsId: ${file(${self:custom.configFile}):eSignatureApiCredentialsId}
    integrationId: ${file(${self:custom.configFile}):integrationId}
    scopeBaseDomain: ${file(${self:custom.configFile}):scopeBaseDomain}
    hrApplicationId: ${file(${self:custom.configFile}):hrApplicationId}
    lambdaPerfMonitorApiKey: ${file(${self:custom.configFile}):lambdaPerfMonitorApiKey}
    AuditLogGroupName: ${file(${self:custom.configFile}):AuditLogGroupName}
    tenantAdminCredentialsId: ${file(${self:custom.configFile}):tenantAdminCredentialsId}
    billingRecipient: ${file(${self:custom.configFile}):billingRecipient}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - logs:DescribeLogGroups
      Resource: "*"
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"
    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"
    - Effect: Allow
      Action:
        - acm:ListCertificates
        - apigateway:GET
        - apigateway:DELETE
        - apigateway:POST
        - apigateway:PATCH
        - apigateway:PUT
        - cloudfront:UpdateDistribution
        - route53:ListHostedZones
        - route53:GetHostedZone
        - route53:ListResourceRecordSets
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
      Resource: "*"
    - Effect: Allow
      Action: # Gives permission to SES in a specific region
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-east-1:*:*"
    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetBucket
        - s3:ListBucket
        - s3:PutObject
      Resource: "arn:aws:s3:::*"

functions:
  eventNotifier:
    handler: notification/handler.send

  auditLogger:
    handler: audit/handler.log

  queryExecutor:
    handler: database/handler.execute
    memorySize: 2048
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  queryExecutorAsync:
    handler: database/handler.execute
    memorySize: 2048
    timeout: 900
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  uploadSignedDocument:
    handler: esignatures/handler.uploadSignedDocument

resources:
  Outputs:
    EventNotifierArn:
      Value: { "Fn::GetAtt": ["EventNotifierLambdaFunction", "Arn" ] }
    AuditLoggerArn:
      Value: { "Fn::GetAtt": ["AuditLoggerLambdaFunction", "Arn" ] }

plugins:
  - serverless-stack-output
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter

  
package:
  individually: false
  excludeDevDependencies: true

custom:
  configFile: ../${opt:variables, 'local'}.serverless.variables.json
  output:
    handler: output.handler
    file: serverless-output.json
  webpack:
    webpackConfig: ./webpack/${file(${self:custom.configFile}):webpackConfigurationFile}
    includeModules: true
    packager: 'npm'
