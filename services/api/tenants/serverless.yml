service: asure-tenants${opt:branchName, ''}

provider:
  stage: ${file(${self:custom.configFile}):stage}
  name: aws
  runtime: nodejs12.x
  timeout: 900   # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 1024
  logRetentionInDays: ${file(${self:custom.configFile}):logRetentionInDays}

  environment:  #environment variables
    awsRegion: ${file(${self:custom.configFile}):awsRegion}
    secretsAwsEndPoint: ${file(${self:custom.configFile}):secretsAwsEndPoint}
    apiSecretId: ${file(${self:custom.configFile}):apiSecretId}
    rdsCredentialsId: ${file(${self:custom.configFile}):rdsCredentialsId}
    payrollApiCredentialsId: ${file(${self:custom.configFile}):payrollApiCredentialsId}
    ssoCredentialsId: ${file(${self:custom.configFile}):ssoCredentialsId}
    asureAdminRoleId: ${file(${self:custom.configFile}):asureAdminRoleId}
    evoHrGlobalAdmin: ${file(${self:custom.configFile}):evoHrGlobalAdmin}
    stage: ${file(${self:custom.configFile}):stage}
    apiDomain: ${file(${self:custom.configFile}):apiDomain}
    domain: ${file(${self:custom.configFile}):domain}
    hrServicesDomain: ${file(${self:custom.configFile}):hrServicesDomain}
    hrDatabaseCreatorStateMachineArn: arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:HrDatabaseCreator-${self:provider.stage}
    hrCompanyMigratorStateMachineArn: arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:HrCompanyMigrator-${self:provider.stage}
    teamNotificationTopicArn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:mojojojo-status-notification
    scopeBaseDomain: ${file(${self:custom.configFile}):scopeBaseDomain}
    goldilocksApplicationId: ${file(${self:custom.configFile}):goldilocksApplicationId}
    hrApplicationId: ${file(${self:custom.configFile}):hrApplicationId}
    ssoPublicKey1: ${file(${self:custom.configFile}):ssoPublicKey1}
    ssoPublicKey2: ${file(${self:custom.configFile}):ssoPublicKey2}
    pageLimitDefault: 30
    pageLimitMax: 100
    AuditLogGroupName: ${file(${self:custom.configFile}):AuditLogGroupName}
    tenantAdminCredentialsId: ${file(${self:custom.configFile}):tenantAdminCredentialsId}
    goldilocksTenantId: ${file(${self:custom.configFile}):goldilocksTenantId}
    integrationId: ${file(${self:custom.configFile}):integrationId}
    eSignatureApiCredentialsId: ${file(${self:custom.configFile}):eSignatureApiCredentialsId}
    tlmReadRole: ${file(${self:custom.configFile}):tlmReadRole}
    tlmWriteRole: ${file(${self:custom.configFile}):tlmWriteRole}
    fileBucketName: ${file(${self:custom.configFile}):fileBucketName}
    payrollBaseUrl: ${file(${self:custom.configFile}):payrollBaseUrl}
    dbBackupBucket: ${file(${self:custom.configFile}):dbBackupBucket}

  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"

    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"

    - Effect: Allow
      Action:
        - acm:ListCertificates
        - apigateway:GET
        - apigateway:DELETE
        - apigateway:POST
        - apigateway:PATCH
        - apigateway:PUT
        - cloudfront:UpdateDistribution
        - route53:ListHostedZones
        - route53:GetHostedZone
        - route53:ListResourceRecordSets
      Resource: "*"

    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
      Resource: "*"

    - Effect: Allow
      Action: states:StartExecution
      Resource:
        - "arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:HrDatabaseCreator${opt:branchName, ''}-${self:provider.stage}"
        - "arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:HrCompanyMigrator${opt:branchName, ''}-${self:provider.stage}"

    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetBucket
        - s3:ListBucket
        - s3:PutObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::*"

    - Effect: Allow
      Action:
        - sns:Publish
      Resource: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:mojojojo-status-notification

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:*:table/ConnectionStrings"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:us-east-1:*:table/ConnectionStrings/index/*

    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: arn:aws:ssm:us-east-1:*:parameter/hr/esignature/simplesign/legacyClientCutOffDate
    
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:BatchGetItem"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource: "arn:aws:dynamodb:us-east-1:*:table/HrCompanyMigrations"

  apiGateway:
    binaryMediaTypes:
      - '*/*'

functions:
  addAdminAccount:
    handler: src/handler.addAdmin
    events:
        - http:
            path: /tenants/{tenantId}/admins
            method: post
            cors:
              origin: '*'

  addRdsDatabase:
    handler: src/handler.addTenantDb
    events:
        - http:
            path: /tenants
            method: post
            cors:
              origin: '*'

  checkTenant:
    handler: src/handler.checkTenantExistence
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  determinant:
    handler: src/handler.dbPlacement
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  dbCreator:
    handler: src/handler.createRdsTenantDb
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  addGlobalAdminAccount:
    handler: src/handler.addAdminAccount
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  errorHandler:
    handler: src/handler.errorHandler

  deleteTenantDatabase:
    handler: src/handler.deleteTenantDatabase
    events:
      - stream: ${file(${self:custom.configFile}):connectionStringsStreamArn}

  addIntegrationUserCredentials:
    handler: src/handler.addIntegrationUserCredentials
    events:
        - http:
            path: /tenants/{tenantId}/integration-user-credentials
            method: patch
            cors:
              origin: '*'

  listCompanies:
    handler: src/handler.companyList
    events:
        - http:
            path: /tenants/{tenantId}/companies
            method: get
            cors:
              origin: '*'

  updateCompany:
    handler: src/handler.companyUpdate
    events:
      - http:
          path: /tenants/{tenantId}/companies/{companyId}
          method: patch
          cors:
            origin: '*'

  migrateCompany:
    handler: src/handler.runCompanyMigration      
    events:
      - http:
          path: /migrations
          method: post
          cors:
            origin: '*' 

  getCompanyById:
    handler: src/handler.getCompanyById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}
            method: get
            cors:
              origin: '*'

  getCompanyLogo:
    handler: src/handler.getCompanyLogo
    events:
      - http:
          path: /tenants/{tenantId}/companies/{companyId}/logo
          method: get
          cors:
            origin: '*'

  listCompanyAnnouncements:
    handler: src/handler.listCompanyAnnouncements
    events:
      - http:
          path: /tenants/{tenantId}/companies/{companyId}/announcements
          method: get
          cors:
            origin: '*'

  listCompanyOpenEnrollments:
    handler: src/handler.listCompanyOpenEnrollments
    events:
      - http:
          path: /tenants/{tenantId}/companies/{companyId}/open-enrollments
          method: get
          cors:
            origin: '*'

  listEeCompaniesBySsoAccount:
    handler: src/handler.listEmployeeCompaniesBySsoAccount
    events:
      - http:
          path: /tenants/{tenantId}/accounts/{ssoAccountId}/companies
          method: get
          cors:
            origin: '*'

  listEmployeesByTenant:
    handler: src/handler.listEmployeesByTenant
    events:
        - http:
            path: /tenants/{tenantId}/employees
            method: get
            cors:
              origin: '*'

  listEmployeesByCompany:
    handler: src/handler.listEmployeesByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees
            method: get
            cors:
              origin: '*'

  getEmployeeById:
    handler: src/handler.getEmployeeById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}
            method: get
            cors:
              origin: '*'

  listLicensesByEmployeeId:
    handler: src/handler.listLicensesByEmployeeId
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/licenses
            method: get
            cors:
              origin: '*'

  updateEmployeeLicenseById:
    handler: src/handler.updateEmployeeLicenseById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/licenses/{id}
            method: patch
            cors:
              origin: '*'

  listCertificatesByEmployeeId:
    handler: src/handler.listCertificatesByEmployeeId
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/certificates
            method: get
            cors:
              origin: '*'

  updateEmployeeCertificateById:
    handler: src/handler.updateEmployeeCertificateById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/certificates/{id}
            method: patch
            cors:
              origin: '*'

  listReviewsByEmployeeId:
    handler: src/handler.listReviewsByEmployeeId
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/reviews
            method: get
            cors:
              origin: '*'

  listBenefitsByEmployeeId:
    handler: src/handler.listBenefitsByEmployeeId
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/benefits
            method: get
            cors:
              origin: '*'

  getEmployeeAbsenceSummary:
    handler: src/handler.getEmployeeAbsenceSummary
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/absence-summary
            method: get
            cors:
              origin: '*'

  updateEmployeeReviewById:
    handler: src/handler.updateEmployeeReviewById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/reviews/{id}
            method: patch
            cors:
              origin: '*'

  listClassesByEmployeeId:
    handler: src/handler.listClassesByEmployeeId
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/classes
            method: get
            cors:
              origin: '*'

  updateEmployeeClassById:
    handler: src/handler.updateEmployeeClassById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/classes/{id}
            method: patch
            cors:
              origin: '*'

  listUserRoles:
    handler: src/handler.listUserRoles
    events:
        - http:
            path: /tenants/{tenantId}/roles
            method: get
            cors:
              origin: '*'

  listConnectionStrings:
    handler: src/handler.listConnectionStrings
    events:
        - http:
            path: /tenants/connection-strings
            method: get
            cors:
              origin: '*'

  getConnectionStringByTenant:
    handler: src/handler.getConnectionStringByTenant
    events:
        - http:
            path: /tenants/{tenantId}/connection-strings
            method: get
            cors:
              origin: '*'

  getDataImportTypes:
    handler: src/handler.getDataImportTypes
    events:
        - http:
            path: /tenants/{tenantId}/data-import-types
            method: get
            cors:
              origin: '*'
  
  listTenants:
    handler: src/handler.listTenants
    events:
        - http:
            path: /tenants
            method: get
            cors:
              origin: '*'

  listCompanyMigrations:
    handler: src/handler.listCompanyMigrations
    events:
        - http:
            path: /migrations
            method: get
            cors:
              origin: '*'

  scheduleTenantDeletion:
    handler: src/handler.scheduleTenantDeletion
    events:
        - http:
            path: /tenants/{tenantId}
            method: patch
            cors:
              origin: '*'

  createCompanyMigration:
    handler: src/handler.createCompanyMigration
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  migrateSsoAccounts:
    handler: src/handler.migrateSsoAccounts
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  migrateHelloSignIntegration:
    handler: src/handler.migrateHelloSignIntegration
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}        

stepFunctions:
  stateMachines:
     HrDatabaseCreator:
      name: HrDatabaseCreator${opt:branchName, ''}-${self:provider.stage}

      definition:
        Comment: "State machine for creating a new tenant database within RDS"
        StartAt: TenantChecker
        States:

          TenantChecker:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-checkTenant
            ResultPath: $.tenantCheck
            Next: DbPlacementDeterminant
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          DbPlacementDeterminant:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-determinant
            ResultPath: $.placement
            Next: TenantDbCreator
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          TenantDbCreator:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-dbCreator
            ResultPath: $.creator
            Next: GlobalAdminCreator
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          GlobalAdminCreator:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-addGlobalAdminAccount
            ResultPath: $.adminAccountCreator
            End: true
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          ErrorHandler:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-errorHandler
            End: true

     HrCompanyMigrator:
      name: HrCompanyMigrator${opt:branchName, ''}-${self:provider.stage}

      definition:
        Comment: "Create company Migration"
        StartAt: DataMigration
        States:
          DataMigration:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-createCompanyMigration
            ResultPath: $.DataMigration
            Next: SsoAccountMigration
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          SsoAccountMigration:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-migrateSsoAccounts
            ResultPath: $.SsoAccountMigration
            Next: HelloSignIntegrationMigration

          HelloSignIntegrationMigration:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-migrateHelloSignIntegration
            ResultPath: $.HelloSignIntegrationMigration
            End: true

          ErrorHandler:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-errorHandler
            End: true  

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-plugin-warmup
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-offline
package:
  individually: false
  excludeDevDependencies: true

custom:
  configFile: ../../${opt:variables, 'local'}.serverless.variables.json
  warmup:
    timeout: 60
    schedule: 'cron(0/5 * * * ? *)'    # Run every 5 minutes
    default:
        - production
    concurrency: 3
  webpack:
    webpackConfig: ./webpack/${file(${self:custom.configFile}):webpackConfigurationFile}
    includeModules: true
    packager: 'npm'
  customDomain:
    basePath: internal${opt:branchName, ''}
    domainName: hr-services.${file(${self:custom.configFile}):domain}
    certificateArn: '*.${file(${self:custom.configFile}):domainCertificateArn}'
    createRoute53Record: false
