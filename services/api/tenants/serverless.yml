service: asure-tenants

provider:
  stage: ${file(${self:custom.configFile}):stage}
  name: aws
  runtime: nodejs8.10
  timeout: 900   # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 1024
  logRetentionInDays: ${file(${self:custom.configFile}):logRetentionInDays}
  
  environment:  #environment variables
    awsRegion: ${file(${self:custom.configFile}):awsRegion}
    secretsAwsEndPoint: ${file(${self:custom.configFile}):secretsAwsEndPoint}
    apiSecretId: ${file(${self:custom.configFile}):apiSecretId}
    rdsCredentialsId: ${file(${self:custom.configFile}):rdsCredentialsId}
    payrollApiCredentialsId: ${file(${self:custom.configFile}):payrollApiCredentialsId}
    ssoCredentialsId: ${file(${self:custom.configFile}):ssoCredentialsId}
    asureAdminRoleId: ${file(${self:custom.configFile}):asureAdminRoleId}
    evoHrGlobalAdmin: ${file(${self:custom.configFile}):evoHrGlobalAdmin}
    stage: ${file(${self:custom.configFile}):stage}
    apiDomain: ${file(${self:custom.configFile}):apiDomain}
    domain: ${file(${self:custom.configFile}):domain}
    hrDatabaseCreatorStateMachineArn: arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:HrDatabaseCreator-${self:provider.stage}
    teamNotificationTopicArn: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:mojojojo-status-notification
    pageLimitDefault: 30
    pageLimitMax: 100
    AuditLogGroupName: ${file(${self:custom.configFile}):AuditLogGroupName}
    IOPIPE_ENABLE_PROFILER: true

  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"

    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"

    - Effect: Allow
      Action:
        - acm:ListCertificates
        - apigateway:GET
        - apigateway:DELETE
        - apigateway:POST
        - apigateway:PATCH
        - apigateway:PUT
        - cloudfront:UpdateDistribution
        - route53:ListHostedZones
        - route53:GetHostedZone
        - route53:ListResourceRecordSets
      Resource: "*"

    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
      Resource: "*"

    - Effect: Allow
      Action: states:StartExecution
      Resource:
        - "arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:HrDatabaseCreator-${self:provider.stage}"

    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetBucket
        - s3:ListBucket
      Resource: "arn:aws:s3:::*"

    - Effect: Allow
      Action:
        - sns:Publish
      Resource: arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:mojojojo-status-notification

functions:
  addAdminAccount:
    handler: src/handler.addAdmin
    events:
        - http:
            path: /tenants/{tenantId}/admins
            method: post
            authorizer: ${file(../../internal-api/serverless-output.json):SsoTokenVerifierArn}
            cors:
              origin: '*'

  addRdsDatabase:
    handler: src/handler.addTenantDb
    events:
        - http:
            path: /tenants
            method: post
            authorizer: ${file(../../internal-api/serverless-output.json):SsoTokenVerifierArn} # ${file(../../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  checkTenant:
    handler: src/handler.checkTenantExistence
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  determinant:
    handler: src/handler.dbPlacement
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  dbCreator:
    handler: src/handler.createRdsTenantDb
    vpc:
      securityGroupIds:
        - ${file(${self:custom.configFile}):lambdaExecutionSecurityGroup}
      subnetIds:
        - ${file(${self:custom.configFile}):privateSubnetId1}
        - ${file(${self:custom.configFile}):privateSubnetId2}

  errorHandler:
    handler: src/handler.errorHandler

  listCompanies:
    handler: src/handler.companyList
    events:
        - http:
            path: /tenants/{tenantId}/companies
            method: get
            authorizer: ${file(../../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  listEmployeesByTenant:
    handler: src/handler.listEmployeesByTenant
    events:
        - http:
            path: /tenants/{tenantId}/employees
            method: get
            authorizer: ${file(../../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  listEmployeesByCompany:
    handler: src/handler.listEmployeesByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees
            method: get
            authorizer: ${file(../../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  listUserRoles:
    handler: src/handler.listUserRoles
    events:
        - http:
            path: /tenants/{tenantId}/roles
            method: get
            authorizer: ${file(../../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

stepFunctions:
  stateMachines:
     HrDatabaseCreator:
      name: HrDatabaseCreator-${self:provider.stage}
  
      definition:
        Comment: "State machine for creating a new tenant database within RDS"
        StartAt: TenantChecker
        States:

          TenantChecker:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-checkTenant
            ResultPath: $.tenantCheck
            Next: DbPlacementDeterminant
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          DbPlacementDeterminant:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-determinant
            ResultPath: $.placement
            Next: TenantDbCreator
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          TenantDbCreator:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-dbCreator
            ResultPath: $.creator
            End: true
            Catch:
              - ErrorEquals:
                  - States.ALL
                Next: ErrorHandler
                ResultPath: $.error

          ErrorHandler:
            Type: Task
            Resource: arn:aws:lambda:${self:provider.region}:#{AWS::AccountId}:function:${self:service}-${self:provider.stage}-errorHandler
            End: true

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-plugin-warmup
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-step-functions
  - serverless-iopipe-layers
package:
  individually: false
  excludeDevDependencies: true

custom:
  configFile: ../../${opt:variables, 'local'}.serverless.variables.json
  warmup:
    timeout: 60
    schedule: 'cron(0/5 * * * ? *)'    # Run every 5 minutes
    default:
        - production
    concurrency: 3
  webpack:
    webpackConfig: ./webpack/${file(${self:custom.configFile}):webpackConfigurationFile}
    includeModules: true
    packager: 'npm'
  customDomain:
    basePath: 'internal'
    domainName: hr-services.${file(${self:custom.configFile}):domain}
    certificateArn: '*.${file(${self:custom.configFile}):domainCertificateArn}'
    createRoute53Record: false
  iopipe:
    token: ${file(${self:custom.configFile}):lambdaPerfMonitorApiKey}
