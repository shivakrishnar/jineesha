service: asure-tenants

provider:
  stage: ${file(${opt:variables}):stage}
  name: aws
  runtime: nodejs8.10
  timeout: 30  # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 128
  environment:  #environment variables
    awsRegion: ${file(${opt:variables}):awsRegion}
    secretsAwsEndPoint: ${file(${opt:variables}):secretsAwsEndPoint}
    apiSecretId: ${file(${opt:variables}):apiSecretId}
    rdsCredentialsId: ${file(${opt:variables}):rdsCredentialsId}
    payrollApiCredentialsId: ${file(${opt:variables}):payrollApiCredentialsId}
    ssoCredentialsId: ${file(${opt:variables}):ssoCredentialsId}
    asureAdminRoleId: ${file(${opt:variables}):asureAdminRoleId}
    evoHrGlobalAdmin: ${file(${opt:variables}):evoHrGlobalAdmin}
    stage: ${file(${opt:variables}):stage}
    apiDomain: ${file(${opt:variables}):apiDomain}

  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"
    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"
    - Effect: Allow
      Action:
        - acm:ListCertificates
        - apigateway:GET
        - apigateway:DELETE
        - apigateway:POST
        - apigateway:PATCH
        - apigateway:PUT
        - cloudfront:UpdateDistribution
        - route53:ListHostedZones
        - route53:GetHostedZone
        - route53:ListResourceRecordSets
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
      Resource: "*"

functions:
  addAdminAccount:
    handler: src/handler.addAdmin
    events:
        - http:
            path: /tenants/{tenantId}/admins
            method: post
            authorizer: ${file(../../internal-api/serverless-output.json):SsoTokenVerifierArn}
            cors:
              origin: '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-plugin-warmup
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter
  - serverless-domain-manager

package:
  individually: false
  excludeDevDependencies: true

custom:
  warmup:
    schedule: 'cron(0/5 * * * ? *)'    # Run every 5 minutes
    default:
        - production
  webpack:
    webpackConfig: ./webpack/${file(${opt:variables}):webpackConfigurationFile}
    includeModules: true
    packager: 'npm'
  customDomain:
    basePath: 'internal'
    domainName: hr-services.${file(${opt:variables}):domain}
    certificateName: '*.${file(${opt:variables}):domain}'
    createRoute53Record: false
