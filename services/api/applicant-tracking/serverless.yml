service: asure-ats${opt:branchName, ''}

provider:
  stage: ${file(${self:custom.configFile}):stage}
  name: aws
  runtime: nodejs16.x
  timeout: 900   # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 1024
  logRetentionInDays: ${file(${self:custom.configFile}):logRetentionInDays}

  environment:  #environment variables
    awsRegion: ${file(${self:custom.configFile}):awsRegion}
    webSocketUrl: ${file(${self:custom.configFile}):webSocketUrl}
    secretsAwsEndPoint: ${file(${self:custom.configFile}):secretsAwsEndPoint}
    apiSecretId: ${file(${self:custom.configFile}):apiSecretId}
    rdsCredentialsId: ${file(${self:custom.configFile}):rdsCredentialsId}
    payrollApiCredentialsId: ${file(${self:custom.configFile}):payrollApiCredentialsId}
    ssoCredentialsId: ${file(${self:custom.configFile}):ssoCredentialsId}
    asureAdminRoleId: ${file(${self:custom.configFile}):asureAdminRoleId}
    evoHrGlobalAdmin: ${file(${self:custom.configFile}):evoHrGlobalAdmin}
    stage: ${file(${self:custom.configFile}):stage}
    apiDomain: ${file(${self:custom.configFile}):apiDomain}
    domain: ${file(${self:custom.configFile}):domain}
    hrServicesDomain: ${file(${self:custom.configFile}):hrServicesDomain}
    hrDatabaseCreatorStateMachineArn: arn:aws:states:us-east-1:#{AWS::AccountId}:stateMachine:HrDatabaseCreator-${self:provider.stage}
    hrCompanyMigratorStateMachineArn: arn:aws:states:us-east-1:#{AWS::AccountId}:stateMachine:HrCompanyMigrator-${self:provider.stage}
    teamNotificationTopicArn: arn:aws:sns:us-east-1:#{AWS::AccountId}:mojojojo-status-notification
    scopeBaseDomain: ${file(${self:custom.configFile}):scopeBaseDomain}
    goldilocksApplicationId: ${file(${self:custom.configFile}):goldilocksApplicationId}
    hrApplicationId: ${file(${self:custom.configFile}):hrApplicationId}
    ssoPublicKey1: ${file(${self:custom.configFile}):ssoPublicKey1}
    ssoPublicKey2: ${file(${self:custom.configFile}):ssoPublicKey2}
    pageLimitDefault: 30
    pageLimitMax: 100
    AuditLogGroupName: ${file(${self:custom.configFile}):AuditLogGroupName}
    tenantAdminCredentialsId: ${file(${self:custom.configFile}):tenantAdminCredentialsId}
    goldilocksTenantId: ${file(${self:custom.configFile}):goldilocksTenantId}
    integrationId: ${file(${self:custom.configFile}):integrationId}
    eSignatureApiCredentialsId: ${file(${self:custom.configFile}):eSignatureApiCredentialsId}
    tlmReadRole: ${file(${self:custom.configFile}):tlmReadRole}
    tlmWriteRole: ${file(${self:custom.configFile}):tlmWriteRole}
    fileBucketName: ${file(${self:custom.configFile}):fileBucketName}
    payrollBaseUrl: ${file(${self:custom.configFile}):payrollBaseUrl}
    dbBackupBucket: ${file(${self:custom.configFile}):dbBackupBucket}

  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"

    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"

    - Effect: Allow
      Action:
        - acm:ListCertificates
        - apigateway:GET
        - apigateway:DELETE
        - apigateway:POST
        - apigateway:PATCH
        - apigateway:PUT
        - cloudfront:UpdateDistribution
        - route53:ListHostedZones
        - route53:GetHostedZone
        - route53:ListResourceRecordSets
      Resource: "*"

    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"

    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
      Resource: "*"

    - Effect: Allow
      Action: states:StartExecution
      Resource:
        - "arn:aws:states:us-east-1:#{AWS::AccountId}:stateMachine:HrDatabaseCreator${opt:branchName, ''}-${self:provider.stage}"
        - "arn:aws:states:us-east-1:#{AWS::AccountId}:stateMachine:HrCompanyMigrator${opt:branchName, ''}-${self:provider.stage}"

    - Effect: Allow
      Action:
        - s3:GetObject
        - s3:GetObjectAcl
        - s3:GetBucket
        - s3:ListBucket
        - s3:PutObject
        - s3:DeleteObject
      Resource: "arn:aws:s3:::*"

    - Effect: Allow
      Action:
        - sns:Publish
      Resource: arn:aws:sns:us-east-1:#{AWS::AccountId}:mojojojo-status-notification

    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:PutItem
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:UpdateItem
      Resource: "arn:aws:dynamodb:us-east-1:*:table/ConnectionStrings"
      
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
      Resource: arn:aws:dynamodb:us-east-1:*:table/ConnectionStrings/index/*

    - Effect: Allow
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource: arn:aws:dynamodb:us-east-1:*:table/WebSocketConnections

    - Effect: Allow
      Action:
        - "execute-api:Invoke"
        - "execute-api:ManageConnections"
      Resource: arn:aws:execute-api:us-east-1:*
    
  apiGateway:
    binaryMediaTypes:
      - '*/*'

functions:
  getQuestionTypeByTenant:
    handler: src/handlerQuestionType.getQuestionTypeByTenant
    events:
        - http:
            path: /tenants/{tenantId}/question-type
            method: get
            cors:
              origin: '*'

  getQuestionBankByTenant:
    handler: src/handlerQuestionBank.getQuestionBankByTenant
    events:
        - http:
            path: /tenants/{tenantId}/question-bank
            method: get
            cors:
              origin: '*'

  getQuestionBankByCompany:
    handler: src/handlerQuestionBank.getQuestionBankByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank
            method: get
            cors:
              origin: '*'

  getQuestionBankById:
    handler: src/handlerQuestionBank.getQuestionBankById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank/{id}
            method: get
            cors:
              origin: '*'              

  createQuestionBank:
    handler: src/handlerQuestionBank.createQuestionBank
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank
            method: post
            cors:
              origin: '*'

  updateQuestionBank:
    handler: src/handlerQuestionBank.updateQuestionBank
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank
            method: put
            cors:
              origin: '*'

  deleteQuestionBank:
    handler: src/handlerQuestionBank.deleteQuestionBank
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank/{id}
            method: delete
            cors:
              origin: '*'

  getHardStatusTypesByTenant:
    handler: src/handlerHardStatusType.getHardStatusTypesByTenant
    events:
        - http:
            path: /tenants/{tenantId}/hardstatus-types
            method: get
            cors:
              origin: '*'

  SoftStatusByTenant:
    handler: src/handlerSoftStatusType.getSoftStatusTypesByTenant
    events:
        - http:
            path: /tenants/{tenantId}/softstatus-types
            method: get
            cors:
              origin: '*'

  SoftStatusByCompany:
    handler: src/handlerSoftStatusType.getSoftStatusTypesByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/softstatus-types
            method: get
            cors:
              origin: '*'

  SoftStatusTypesById:
    handler: src/handlerSoftStatusType.getSoftStatusTypesById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/softstatus-types/{id}
            method: get
            cors:
              origin: '*'

  SoftStatusByCompAndHardStatus:
    handler: src/handlerSoftStatusType.getSoftStatusTypesByCompanyAndHardStatusType
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/hardstatus-types/{hardStatusTypeId}/softstatus-types
            method: get
            cors:
              origin: '*'

  SoftStatusByHardStatus:
    handler: src/handlerSoftStatusType.getSoftStatusTypesByHardStatusType
    events:
        - http:
            path: /tenants/{tenantId}/hardstatus-types/{hardStatusTypeId}/softstatus-types
            method: get
            cors:
              origin: '*'

  ApplicationVersionByTenant:
    handler: src/handlerApplicationVersion.getApplicationVersionByTenant
    events:
        - http:
            path: /tenants/{tenantId}/application-versions
            method: get
            cors:
              origin: '*'

  ApplicationVersionByCompany:
    handler: src/handlerApplicationVersion.getApplicationVersionByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-versions
            method: get
            cors:
              origin: '*'

  ApplicationVersionById:
    handler: src/handlerApplicationVersion.getApplicationVersionById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-versions/{id}
            method: get
            cors:
              origin: '*'

  createApplicationVersion:
    handler: src/handlerApplicationVersion.createApplicationVersion
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-version
            method: post
            cors:
              origin: '*'

  getQuestBankMultChoiceAnswersById:
    handler: src/handlerQuestionBankMultipleChoiceAnswers.getQuestionBankMultipleChoiceAnswersById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-multiple-choice-answers/{id}
            method: get
            cors:
              origin: '*'
              
  getQuestBankMultChoiceAnswersByTenant:
    handler: src/handlerQuestionBankMultipleChoiceAnswers.getQuestionBankMultipleChoiceAnswersByTenant
    events:
        - http:
            path: /tenants/{tenantId}/question-bank-multiple-choice-answers
            method: get
            cors:
              origin: '*'

  getQuestBankMultChoiceAnswersByCompany:
    handler: src/handlerQuestionBankMultipleChoiceAnswers.getQuestionBankMultipleChoiceAnswersByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-multiple-choice-answers
            method: get
            cors:
              origin: '*'

  createQuestBankMultChoiceAnswers:
    handler: src/handlerQuestionBankMultipleChoiceAnswers.createQuestionBankMultipleChoiceAnswers
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-multiple-choice-answers
            method: post
            cors:
              origin: '*'

  updateQuestBankMultChoiceAnswers:
    handler: src/handlerQuestionBankMultipleChoiceAnswers.updateQuestionBankMultipleChoiceAnswers
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-multiple-choice-answers
            method: put
            cors:
              origin: '*' 

  deleteQuestBankMultChoiceAnswers:
    handler: src/handlerQuestionBankMultipleChoiceAnswers.deleteQuestionBankMultipleChoiceAnswers
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-multiple-choice-answers/{id}
            method: delete
            cors:
              origin: '*'                                                      

  updateApplicationVersion:
    handler: src/handlerApplicationVersion.updateApplicationVersion
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-version
            method: put
            cors:
              origin: '*'
  
  deleteApplicationVersion:
    handler: src/handlerApplicationVersion.deleteApplicationVersion
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-version/{id}
            method: delete
            cors:
              origin: '*'

  createApplicationVersionCustomQuestion:
    handler: src/handlerApplicationVersionCustomQuestion.createApplicationVersionCustomQuestion
    events:
        - http:
            path: /tenants/{tenantId}/application-version-custom-question
            method: post
            cors:
              origin: '*'

  deleteApplicationVersionCustomQuestion:
    handler: src/handlerApplicationVersionCustomQuestion.deleteApplicationVersionCustomQuestion
    events:
        - http:
            path: /tenants/{tenantId}/application-versions/{applicationVersionId}/question-banks/{questionBankId}/application-version-custom-question
            method: delete
            cors:
              origin: '*'

  getJobPostingByTenant:
    handler: src/handlerJobPosting.getJobPostingByTenant
    events:
        - http:
            path: /tenants/{tenantId}/job-posting
            method: get
            cors:
              origin: '*'

  getJobPostingByCompany:
    handler: src/handlerJobPosting.getJobPostingByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/job-posting
            method: get
            cors:
              origin: '*'

  getJobPostingById:
    handler: src/handlerJobPosting.getJobPostingById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/job-posting/{id}
            method: get
            cors:
              origin: '*'

  createJobPosting:
    handler: src/handlerJobPosting.createJobPosting
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/job-posting
            method: post
            cors:
              origin: '*'

  updateJobPosting:
    handler: src/handlerJobPosting.updateJobPosting
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/job-posting
            method: put
            cors:
              origin: '*'

  deleteJobPosting:
    handler: src/handlerJobPosting.deleteJobPosting
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/job-posting/{id}
            method: delete
            cors:
              origin: '*'

  createJobPostingResponsibleUser:
    handler: src/handlerJobPostingResponsibleUser.createJobPostingResponsibleUser
    events:
        - http:
            path: /tenants/{tenantId}/job-posting-responsible-user
            method: post
            cors:
              origin: '*'

  deleteJobPostingResponsibleUser:
    handler: src/handlerJobPostingResponsibleUser.deleteJobPostingResponsibleUser
    events:
        - http:
            path: /tenants/{tenantId}/job-postings/{atJobPostingId}/hr-next-users/{hrNextUserId}/job-posting-responsible-user
            method: delete
            cors:
              origin: '*'

  getApplicationByCompany:
    handler: src/handlerApplication.getApplicationByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/applications
            method: get
            cors:
              origin: '*'

  getApplicationByKey:
    handler: src/handlerApplication.getApplicationByKey
    events:
        - http:
            path: /tenants/{tenantId}/applications/key/{applicationKey}
            method: get
            cors:
              origin: '*'

  createApplication:
    handler: src/handlerApplication.createApplication
    events:
        - http:
            path: /tenants/{tenantId}/application
            method: post
            cors:
              origin: '*'

  updateApplication:
    handler: src/handlerApplication.updateApplication
    events:
        - http:
            path: /tenants/{tenantId}/application
            method: put
            cors:
              origin: '*'

  getAppQuestBankAnswerById:
    handler: src/handlerApplicationQuestionBankAnswer.getApplicationQuestionBankAnswerById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-question-bank-answer/{id}
            method: get
            cors:
              origin: '*'

  getAppQuestBankAnswerByTenant:
    handler: src/handlerApplicationQuestionBankAnswer.getApplicationQuestionBankAnswerByTenant
    events:
        - http:
            path: /tenants/{tenantId}/application-question-bank-answer
            method: get
            cors:
              origin: '*'

  getAppQuestBankAnswerByCompany:
    handler: src/handlerApplicationQuestionBankAnswer.getApplicationQuestionBankAnswerByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-question-bank-answer
            method: get
            cors:
              origin: '*'

  createAppQuestBankAnswer:
    handler: src/handlerApplicationQuestionBankAnswer.createApplicationQuestionBankAnswer
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-question-bank-answer
            method: post
            cors:
              origin: '*'

  updateAppQuestBankAnswer:
    handler: src/handlerApplicationQuestionBankAnswer.updateApplicationQuestionBankAnswer
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-question-bank-answer
            method: put
            cors:
              origin: '*'

  deletetAppQuestBankAnswer:
    handler: src/handlerApplicationQuestionBankAnswer.deleteApplicationQuestionBankAnswer
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-question-bank-answer/{id}
            method: delete
            cors:
              origin: '*'           

  getApplicationNoteByApplicationId:
    handler: src/handlerApplicationNote.getApplicationNoteByApplicationId
    events:
        - http:
            path: /tenants/{tenantId}/applications/{applicationId}/application-notes
            method: get
            cors:
              origin: '*'

  getApplicationNoteById:
    handler: src/handlerApplicationNote.getApplicationNoteById
    events:
        - http:
            path: /tenants/{tenantId}/application-note/{id}
            method: get
            cors:
              origin: '*'

  createApplicationNote:
    handler: src/handlerApplicationNote.createApplicationNote
    events:
        - http:
            path: /tenants/{tenantId}/application-note
            method: post
            cors:
              origin: '*'

  updateApplicationNote:
    handler: src/handlerApplicationNote.updateApplicationNote
    events:
        - http:
            path: /tenants/{tenantId}/application-note
            method: put
            cors:
              origin: '*'

  deleteApplicationNote:
    handler: src/handlerApplicationNote.deleteApplicationNote
    events:
        - http:
            path: /tenants/{tenantId}/application-note/{id}
            method: delete
            cors:
              origin: '*'

  getAppStatusHistoryById:
    handler: src/handlerApplicationStatusHistory.getApplicationStatusHistoryById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-status-history/{id}
            method: get
            cors:
              origin: '*'

  getAppStatusHistoryByTenant:
    handler: src/handlerApplicationStatusHistory.getApplicationStatusHistoryByTenant
    events:
        - http:
            path: /tenants/{tenantId}/application-status-history
            method: get
            cors:
              origin: '*'

  getAppStatusHistoryByCompany:
    handler: src/handlerApplicationStatusHistory.getApplicationStatusHistoryByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-status-history
            method: get
            cors:
              origin: '*'

  createtAppStatusHistory:
    handler: src/handlerApplicationStatusHistory.createApplicationStatusHistory
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-status-history
            method: post
            cors:
              origin: '*'

  updateAppStatusHistory:
    handler: src/handlerApplicationStatusHistory.updateApplicationStatusHistory
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-status-history
            method: put
            cors:
              origin: '*'

  deleteAppStatusHistory:
    handler: src/handlerApplicationStatusHistory.deleteApplicationStatusHistory
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/application-status-history/{id}
            method: delete
            cors:
              origin: '*'              

  getQuestionBankGroupByTenant:
    handler: src/handlerQuestionBankGroup.getQuestionBankGroupByTenant
    events:
        - http:
            path: /tenants/{tenantId}/question-bank-group
            method: get
            cors:
              origin: '*'

  getQuestionBankGroupByCompany:
    handler: src/handlerQuestionBankGroup.getQuestionBankGroupByCompany
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-group
            method: get
            cors:
              origin: '*'

  getQuestionBankGroupById:
    handler: src/handlerQuestionBankGroup.getQuestionBankGroupById
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-group/{id}
            method: get
            cors:
              origin: '*'

  createQuestionBankGroup:
    handler: src/handlerQuestionBankGroup.createQuestionBankGroup
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-group
            method: post
            cors:
              origin: '*'
              
  updateQuestionBankGroup:
    handler: src/handlerQuestionBankGroup.updateQuestionBankGroup
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-group
            method: put
            cors:
              origin: '*'

  deleteQuestionBankGroup:
    handler: src/handlerQuestionBankGroup.deleteQuestionBankGroup
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/question-bank-group/{id}
            method: delete
            cors:
              origin: '*'

  getSystemsById:
    handler: src/handlerSystems.getSystemsById
    events:
        - http:
            path: /tenants/{tenantId}/systems/{id}
            method: get
            cors:
              origin: '*'

  getSystemsByTenant:
    handler: src/handlerSystems.getSystemsByTenant
    events:
        - http:
            path: /tenants/{tenantId}/systems
            method: get
            cors:
              origin: '*'            

  createSystems:
    handler: src/handlerSystems.createSystems
    events:
        - http:
            path: /tenants/{tenantId}/systems
            method: post
            cors:
              origin: '*'

  updateSystems:
    handler: src/handlerSystems.updateSystems
    events:
        - http:
            path: /tenants/{tenantId}/systems
            method: put
            cors:
              origin: '*'              

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-plugin-warmup
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-offline

package:
  individually: false
  excludeDevDependencies: true

custom:
  configFile: ../../${opt:variables, 'local'}.serverless.variables.json
  warmup:
    timeout: 60
    schedule: 'cron(0/5 * * * ? *)'    # Run every 5 minutes
    default:
        - production
        - development
        - staging
    concurrency: 3
  webpack:
    webpackConfig: ./webpack/${file(${self:custom.configFile}):webpackConfigurationFile}
    includeModules: true
    packager: 'npm'
  customDomain:
    basePath: ats${opt:branchName, ''}
    domainName: hr-services.${file(${self:custom.configFile}):domain}
    certificateArn: '*.${file(${self:custom.configFile}):domainCertificateArn}'
    createRoute53Record: false
