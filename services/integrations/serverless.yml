service: asure-integrations

provider:
  stage: ${file(${opt:variables}):stage}
  name: aws
  runtime: nodejs8.10
  timeout: 30  # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 128
  vpc:
    securityGroupIds:
      - ${file(${opt:variables}):lambdaExecutionSecurityGroup}
    subnetIds:
      - ${file(${opt:variables}):privateSubnetId1}
      - ${file(${opt:variables}):privateSubnetId2}

  environment:  #environment variables
    awsRegion: ${file(${opt:variables}):awsRegion}
    secretsAwsEndPoint: ${file(${opt:variables}):secretsAwsEndPoint}
    apiSecretId: ${file(${opt:variables}):apiSecretId}
    rdsCredentialsId: ${file(${opt:variables}):rdsCredentialsId}
    sesSmtpCredentialsId: ${file(${opt:variables}):sesSmtpCredentialsId}
    sesSmtpServerHost: ${file(${opt:variables}):sesSmtpServerHost}
    sesSmtpServerPort: ${file(${opt:variables}):sesSmtpServerPort}
    payrollApiCredentialsId: ${file(${opt:variables}):payrollApiCredentialsId}
    eSignatureApiCredentialsId: ${file(${opt:variables}):eSignatureApiCredentialsId}
    eSignatureApiDevModeOn: ${file(${opt:variables}):eSignatureApiDevModeOn}
    errorsTriggered: true
    pageLimitDefault: 30
    pageLimitMax: 100
    stage: ${file(${opt:variables}):stage}
    evoHrUserTypeSuperAdmin: ${file(${opt:variables}):evoHrUserTypeSuperAdmin}
    evoHrUserTypeSBAdmin: ${file(${opt:variables}):evoHrUserTypeSBAdmin}
    evoHrGroupPayroll: ${file(${opt:variables}):evoHrGroupPayroll}
    evoHrGroupCompany: ${file(${opt:variables}):evoHrGroupCompany}
    evoHrGroupEmployee: ${file(${opt:variables}):evoHrGroupEmployee}
    evoHrGlobalAdmin: ${file(${opt:variables}):evoHrGlobalAdmin}
    apiDomain: ${file(${opt:variables}):apiDomain}
    fromEmail: ${file(${opt:variables}):fromEmail}
    integrationId: ${file(${opt:variables}):integrationId}
    goldilocksApplicationId: ${file(${opt:variables}):goldilocksApplicationId}

  iamRoleStatements:
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"
    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"
    - Effect: Allow
      Action:
        - acm:ListCertificates
        - apigateway:GET
        - apigateway:DELETE
        - apigateway:POST
        - apigateway:PATCH
        - apigateway:PUT
        - cloudfront:UpdateDistribution
        - route53:ListHostedZones
        - route53:GetHostedZone
        - route53:ListResourceRecordSets
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - rds:DescribeDBInstances
      Resource: "*"
    - Effect: Allow
      Action: # Gives permission to SES in a specific region
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: "arn:aws:ses:us-east-1:*:*"

functions:
  createTemplate:
    handler: esignature/src/handler.createTemplate
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/esignatures/templates
            method: post
            authorizer: ${file(../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  createBulkSignRequest:
    handler: esignature/src/handler.createBulkSignatureRequest
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/esignatures/requests
            method: post
            authorizer: ${file(../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'
  
  createSignRequest:
    handler: esignature/src/handler.createSignatureRequest
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/esignatures/requests
            method: post
            authorizer: ${file(../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  createSignUrl: 
    handler: esignature/src/handler.createSignUrl
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/employees/{employeeId}/esignatures/{signatureId}/sign-url
            method: get
            cors:
              origin: '*'

  listTemplates:
    handler: esignature/src/handler.listTemplates
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/esignatures/templates
            method: get
            authorizer: ${file(../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  listDocuments:
    handler: esignature/src/handler.listDocuments
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/esignatures/documents
            method: get
            authorizer: ${file(../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  listCompanySignatureRequests:
    handler: esignature/src/handler.listCompanySignatureRequests
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/esignatures/requests
            method: get
            authorizer: ${file(../internal-api/serverless-output.json):TokenVerifierArn}
            cors:
              origin: '*'

  onboarding:
    handler: esignature/src/handler.onboarding
    events:
        - http:
            path: /tenants/{tenantId}/companies/{companyId}/esignatures/requests/onboarding
            method: post
            cors:
              origin: '*'

  configure:
    handler: esignature/src/handler.configure
    events:
      - http:
          path: /tenants/{tenantId}/companies/{companyId}/esignatures
          method: patch
          authorizer: ${file(../internal-api/serverless-output.json):TokenVerifierArn}
          cors:
            origin: '*'

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

plugins:
  - serverless-plugin-warmup
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter
  - serverless-domain-manager
  - serverless-apigw-binary

package:
  individually: false
  excludeDevDependencies: true

custom:
  warmup:
    schedule: 'cron(0/5 * * * ? *)'    # Run every 5 minutes
    default:
        - production
        - development
        - staging
  webpack:
    webpackConfig: ./webpack/${file(${opt:variables}):webpackConfigurationFile}
    includeModules: true
    packager: 'npm'
  customDomain:
    basePath: integrations
    domainName: hr-services.${file(${opt:variables}):domain}
    certificateName: '*.${file(${opt:variables}):domain}'
    createRoute53Record: false
  apigwBinary:
    types:
      - 'application/pdf'
      - 'image/*'
      - 'text/plain'
      - 'text/html'
      - 'application/octet-stream'
      - 'application/xhtml+xml'