service: asure-hr-services

provider:
  stage: ${file(${opt:variables}):stage}
  name: aws
  runtime: nodejs8.10
  timeout: 30  # AWS API Gateway timeout limit (30s)
  versionFunctions: false
  memorySize: 128
  vpc:
    securityGroupIds:
      - ${file(${opt:variables}):lambdaExecutionSecurityGroup}
    subnetIds:
      - ${file(${opt:variables}):privateSubnetId1}
      - ${file(${opt:variables}):privateSubnetId2}
    
  environment:  #environment variables
    awsRegion: ${file(${opt:variables}):awsRegion}
    secretsAwsEndPoint: ${file(${opt:variables}):secretsAwsEndPoint}
    apiSecretId: ${file(${opt:variables}):apiSecretId}
    rdsCredentialsId: ${file(${opt:variables}):rdsCredentialsId}
    errorsTriggered: true
    pageLimitDefault: 30
    pageLimitMax: 100
    evoHrUserTypeSuperAdmin: ${file(${opt:variables}):evoHrUserTypeSuperAdmin}
    evoHrUserTypeSBAdmin: ${file(${opt:variables}):evoHrUserTypeSBAdmin}
    evoHrGroupPayroll: ${file(${opt:variables}):evoHrGroupPayroll}
    evoHrGroupCompany: ${file(${opt:variables}):evoHrGroupCompany}
    evoHrGroupEmployee: ${file(${opt:variables}):evoHrGroupEmployee}

  iamRoleStatements: 
    - Effect: Allow
      Action: # Gives permission to create the necessary ENIs for execution in VPC
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
        - ec2:DetachNetworkInterface
      Resource: "arn:aws:ec2:us-east-1:*:*"
    - Effect: Allow
      Action:
        - secretsmanager:*
        - kms:DescribeKey
        - kms:ListAliases
        - kms:ListKeys
      Resource: "*"
    - Effect: Allow
      Action:
        - acm:ListCertificates 
        - apigateway:GET                   
        - apigateway:DELETE                  
        - apigateway:POST                    
        - apigateway:PATCH
        - apigateway:PUT                    
        - cloudfront:UpdateDistribution       
        - route53:ListHostedZones              
        - route53:GetHostedZone               
        - route53:ListResourceRecordSets      
      Resource: "*"

functions:
  listDirectDeposits:
    handler: src/api/direct-deposits/handler.list
    events:
        - http:
            path: /employees/{employeeId}/direct-deposits
            method: get
            authorizer: tokenVerifier
            cors: true
  createDirectDeposit:
    handler: src/api/direct-deposits/handler.create
    events:
        - http:
            path: /employees/{employeeId}/direct-deposits
            method: post
            authorizer: tokenVerifier
            cors: true
  tokenVerifier:
    handler: src/authentication/handler.tokenVerifier

resources:
  Outputs:
    TokenVerifierArn:
      Value: { "Fn::GetAtt": ["TokenVerifierLambdaFunction", "Arn" ] }
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Access-Control-Allow-Headers, Origin,Accept, X-Requested-With, Content-Type, Access-Control-Request-Method, Access-Control-Request-Headers'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
  
plugins:
  - serverless-webpack
  - serverless-aws-documentation
  - serverless-cloudformation-resource-counter
  - serverless-domain-manager

package:
  individually: true
  excludeDevDependencies: true

custom:
  webpack: 
    webpackConfig: ./webpack/${file(${opt:variables}):webpackConfigurationFile}
    includeModules: true   
    packager: 'npm'
  customDomain:
    domainName: api.direct-deposits.${file(${opt:variables}):domain}
    certificateName: '*.${file(${opt:variables}):domain}'
    createRoute53Record: false